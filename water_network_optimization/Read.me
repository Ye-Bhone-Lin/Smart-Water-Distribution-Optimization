# ðŸ’§ Realistic Water Network Modelling

This is a Streamlit web application that generates realistic, synthetic water distribution networks based on real-world street layouts from OpenStreetMap.

The application provides an interactive interface to control network parameters and visualises the resulting network on a map, complete with strategically placed assets like treatment plants, pumps, and water tanks.



---
## ðŸŒŸ Key Features

* **Real-World Foundation:** Generates network layouts from any location using OpenStreetMap data.
* **Intelligent Asset Placement:** Uses a rule-based algorithm to place key components in logical locations.
* **Realistic Scattering:** Ensures that assets like pumps and tanks are spread out across the network, not clustered together.
* **User-Controlled Parameters:** Easily adjust network density, the number of pumps and tanks, and the prevalence of valves through an interactive sidebar.
* **Interactive Visualization:** Displays the final network on an interactive map, with each component type clearly styled for easy identification.

---
##  Future Applications: Network Optimization

The data generated by this simulator serves as an excellent foundation for more advanced analysis. The realistic network topology, component properties, and demand data can be exported and fed into hydraulic simulation engines (like **EPANET** or the Python library **WNTR**) to solve critical optimization problems.

This allows engineers and planners to test various scenarios, including:

* **Energy Efficiency:** Finding the optimal pump operating schedules to minimize electricity costs while meeting pressure requirements.
* **System Resilience:** Simulating the impact of pipe breaks or pump failures to identify vulnerabilities in the network.
* **Leak Detection Strategies:** Modeling pressure sensor data to determine the best locations for leak detection equipment.
* **Infrastructure Planning:** Testing the effects of adding new pipes or tanks to serve a growing population.

Essentially, this tool provides the necessary "digital twin" or baseline model required to improve the efficiency and reliability of a water distribution system.

---
##  The Core Algorithm

The strength of this simulator lies in its multi-step algorithm that transforms a simple street map into a plausible water network.

### Step 1: Data Acquisition & Pruning

1.  **Fetch Street Network:** The process begins by using the `osmnx` library to download the street network for a user-selected location. This provides a dense graph of intersections (nodes) and roads (edges).
2.  **Prune the Graph:** Since water pipe layouts are typically sparser than road networks, the algorithm randomly removes a percentage of nodes based on the **Node Skip Probability** slider to create a more realistic, tree-like structure.
3.  **Ensure Connectivity:** After pruning, the algorithm identifies the single largest connected component of the graph to ensure the final network is a single, continuous system.

### Step 2: Identifying Geographic Zones

1.  **Find the Boundary (Convex Hull):** The algorithm calculates the network's "convex hull" to identify the absolute outer-edge points, called **"hull nodes."**
2.  **Find the Center (Centroid):** It calculates the geographic centre of all nodes in the network, which acts as a stable reference point for placing assets.

### Step 3: Rule-Based Asset Placement

This is the core logic that mimics how real-world networks are designed.

1.  **Source (Treatment Plant):** Placed on the hull node that is **closest** to the network's centre.
2.  **Tanks (Scattering Logic):** The first tank is placed on the hull node **farthest** from the centre. Subsequent tanks are placed on hull nodes that are **farthest away from all tanks already placed** to ensure they are spread out.
3.  **Pumps (Scattering Logic):** Placed on **internal nodes** with the most connections (high **Degree Centrality**). A scattering logic is also used to ensure they are distributed throughout the network.

### Step 4: Finalizing the Network

1.  **Assign Junctions:** Any unassigned node becomes a **Junction** and is given a random water demand.
2.  **Assign Pipe Attributes:** Every pipe is assigned a random **diameter**, a **roughness** value, and a chance of containing a **valve**.

---
##  Getting Started

To run this application on your local machine, follow these steps.

### Prerequisites

* Python 3.8 or higher
* pip package manager

### Installation

1.  Clone this repository or download the source code.
2.  It's recommended to create a virtual environment:
    ```bash
    python -m venv venv
    source venv/bin/activate  # On Windows, use `venv\Scripts\activate`
    ```
3.  Install the required libraries:
    ```bash
    pip install streamlit osmnx networkx plotly numpy pandas scipy geopy
    ```

### Running the App

1.  Navigate to the project directory in your terminal.
2.  Run the following command:
    ```bash
    streamlit run your_script_name.py
    ```
3.  The application will open in your web browser.

---
##  How to Use the Application

All controls are located in the sidebar on the left:

1.  **Select a Location:** Choose one of the predefined districts from the dropdown menu.
2.  **Node Skip Probability:** Adjust this slider to control the density of the final network.
3.  **Number of Pumps / Tanks:** Set the number of each asset you want the algorithm to place.
4.  **Percentage of Pipes with Valves:** Controls how many pipes will be assigned a valve.
5.  **Generate Network:** Click this button to start the generation process.

---
##  Technologies Used

* **Streamlit:** For creating the interactive web application.
* **OSMnx:** For downloading real-world street network data from OpenStreetMap.
* **NetworkX:** For graph-based data modelling and analysis.
* **Plotly:** For creating the interactive map visualizations.
* **Scipy / NumPy / Pandas:** For numerical operations and data manipulation.
* **Geopy:** For calculating accurate geographic distances.